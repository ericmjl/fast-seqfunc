name: Run tests on pull requests

on:
  pull_request:
    paths:
      - 'fast_seqfunc/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - '.github/workflows/*.yaml'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    name: Tests (${{ matrix.test-type }})
    timeout-minutes: ${{ matrix.test-type == 'slow' && 45 || 15 }}

    strategy:
      matrix:
        test-type: ['not-slow', 'slow']
      fail-fast: false # Allow other tests to continue if one fails

    # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: true
          environments: tests

      - name: Run tests
        id: run-tests
        run: |
          # Determine the pytest marker and coverage file based on the test type
          if [[ "${{ matrix.test-type }}" == "slow" ]]; then
            MARKER="slow"
            COVERAGE_FILE="coverage-slow.xml"
          else
            MARKER="not slow"
            COVERAGE_FILE="coverage-not-slow.xml"
          fi

          echo "Running tests with marker: -m \"$MARKER\""

          # Run tests and capture output and exit code
          set +e
          TEST_OUTPUT=$(pixi run -e tests -- pytest -m "$MARKER" --cov --cov-report=xml:$COVERAGE_FILE --cov-report=term-missing -v)
          TEST_EXIT_CODE=$?
          set -e

          # Count test results
          PASSED=$(echo "$TEST_OUTPUT" | grep -o "passed" | wc -l)
          FAILED=$(echo "$TEST_OUTPUT" | grep -o "failed" | wc -l)
          SKIPPED=$(echo "$TEST_OUTPUT" | grep -o "skipped" | wc -l)

          # Set outputs for summary
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

          # Display test output
          echo "$TEST_OUTPUT"

          # Debug info
          echo "Test exit code: $TEST_EXIT_CODE"

          # Only exit with non-zero if tests actually failed
          if [ $FAILED -gt 0 ]; then
            echo "Tests failed, exiting with code 1"
            exit 1
          else
            echo "All tests passed or skipped, exiting with code 0"
            exit 0
          fi

      - name: Create test summary
        if: always()
        run: |
          echo "## ${{ matrix.test-type }} Test Results 🧪" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: ${{ steps.run-tests.outputs.passed || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${{ steps.run-tests.outputs.failed || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏩ Skipped: ${{ steps.run-tests.outputs.skipped || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- Exit Code: ${{ steps.run-tests.outputs.exit_code || 'N/A' }}" >> $GITHUB_STEP_SUMMARY

      # https://github.com/codecov/codecov-action
      - name: Upload code coverage
        if: success() || failure() # Run this step even if tests fail
        uses: codecov/codecov-action@v2
        with:
          # flag the upload with the test type to separate them in codecov
          flags: ${{ matrix.test-type }}
          verbose: true # optional (default = false)


  # This helps us check that pyproject.toml's `project` table's `dependencies`
  # are defined completely.
  bare-install:
    runs-on: ubuntu-latest
    name: Bare installation
    timeout-minutes: 5

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run CLI as a smoke test.
        run: "fast-seqfunc --help"
